#include <Bearing_SW/DEFINES_SW.h>
#include <xdc/std.h>
#include "defines.h"

/////////////////////// Пороги /////////////////
/////////////////////////////////////////////// 
extern const float bound_detection_SW;
extern const float bound_max_distance_SW;
extern const float bound_grouping_SW;
extern const float bound_noise_SW;
extern const float bound_min_adjacent_bin_SW;
extern const float bound_min_bin_signal_SW;

extern const float Half_Band_POO_SW;
extern const float bin_resolution_POO_SW;
extern const float POO_CurrentCentralFreq_SW;


///////////////////////////////////////////
////////////////////////////////////////////


/////////////////// Подыгрыш для отладки  /////////////////////
//////////////////////////////////////////////////////////////
////////// Входные комплексные спектральные отсчёты размерность Nb * Nr//////////

extern float ReS0_SW[SIZE_S_SW];
extern float ImS0_SW[SIZE_S_SW];
extern float ReS1_SW[SIZE_S_SW];
extern float ImS1_SW[SIZE_S_SW];
extern float ReS2_SW[SIZE_S_SW];
extern float ImS2_SW[SIZE_S_SW];
extern float ReS3_SW[SIZE_S_SW];
extern float ImS3_SW[SIZE_S_SW];


///////////////////////////////////////////////////////
/// Могут изменяться, задаются оператором за АРМ //

extern const uint8_t    count_read_SW;   // кол-во временных реализаций
extern uint16_t    count_bin_SW;    // кол-во спектральных отсчётов


///////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////


////////////////////////Блок обнаружение и группирование/////////////////
/////////////////////////////////////////////////////////////////////////
extern float ReW_Bin_SW[SIZE_NAC_SW];        // накопленные матрицы по  трём реализациям компл энергий, элементы соответсвуют номерам каналам
extern float ImW_Bin_SW[SIZE_NAC_SW];

extern float    stat_detection_SW;
extern float    stat_grouping_SW;



////////////   Выходные данные после блока обнаружение   //////////////
extern float central_Freq_Signal_SW;
extern float ReW_Accumulation_SW[SIZE_ACCUM];
extern float ImW_Accumulation_SW[SIZE_ACCUM];
extern float mas_ReQ[SIZE_Q];				// массив реальных частей комплексных векторов взаимных энергий "рамка-штырь"
extern float mas_ImQ[SIZE_Q];				// массив мнимых частей комплексных векторов взаимных энергий   "рамка-штырь"
extern float mas_ReW[SIZE_SW];	            // массив реальных частей значений комплек. матрицы взаимных энергий, квадратная матрица
extern float mas_ImW[SIZE_SW];



extern float   end_Freq_Signal_SW;
extern float   begin_Freq_Signal_SW;
//////////////////////////////////////////////////


///////////////// Входные массивы на Пеленг ////////
/////////////////////////////////////////////////////

extern float Mas_AC_Loop[SIZE_MAS_AC_SW];
extern float Mas_Inform_AC_Loop[SIZE_INF];


/////////////////////////////////////////////
////////////////////////////////////////////

extern float Fc_SW;

//// Параметры содержащие структуру данных блока "Частотный диапазон"///////// 
//считываются из Mas_Inform_AC в функции  FUNC_Read_Params_Freqdiap_SW///////
////////////////////////////////////////////////////////////////////////////

extern float F_start_SW;					// начальная частота, МГц
extern float F_stop_SW;					// конечная частота, МГц
extern float F_shag_SW;                   // шаг частот, МГц
extern int   c_azimuth_SW;			    // колич-во азимутальных отсчётов
extern int   c_channel_SW;				// количество каналов антенной системы
extern float ind_start_SW;                // индекс 1-ого элемента блока част. диап. в массиве Mas_AC
extern float c_frequency_SW;				// количество частот

/////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////


/////////////// Выходные массивы после формирования действительных и мнимых частей юстир коэффициентов/////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
extern float ReU_SW[SIZE_U_SW];				// массив действ. частей юстировочных коэф. для цетральной частоты F

extern float ImU_SW[SIZE_U_SW];				// массив мнимых. частей юстировочных коэф. для цетральной частоты F


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////// Выходное значение функции FUNC_Cubic_Interpolation_SW /////////////////////
extern float value_interpolation_SW;							// выходное значение функции для частоты F_diff локально нормир на F_shag

/////////////////////////////////////////////////////////////////////////////

//////////////// Выходные значения расчета отсчетов пеленгационного рельефа в эквидистантных точках //////
//////////////                         FUNC_Direction_Finding_Reports_SW               //////////////////

extern float Mtheta_SW[SIZE_THETA];           // массива значений пеленгационного рельефа
extern float znam_Mtheta_SW[SIZE_THETA];


////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////// Выходное значение функции нахождения индексов двух пар смежных эквидистантных точек, между которыми содержатся ///////////////
//////                                    максимумы основного и обратного лепестков пеленгационного рельефа                                ////
///////////										    FUNC_Search_Related_Pointers_Index_SW											   //////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
extern int     ind_max_2;      // индекс, соответствующий максимальному значению Mas[]  для второй пары смежных эквидистантных точек пеленгационного рельефа Mtheta
extern int     ind_max_1;		// индекс, соответствующий максимальному значению Mas[]  для первой пары смежных эквидистантных точек пеленгационного рельефа Mtheta



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// Выходное значение функции вычисления параметров двух точек (аргумент, значение и производная) между которыми находится глобальный максимум////////
////////////													FUNC_Calculating_Derivate_Value_Argue_Points_SW														////////													/////////

extern float    dy;
extern float    xL; 			// аргументы двух точек, между которыми находится глобальный максимум
extern float    xR;
extern float    yL; 			// значения двух точек, между которыми находится глобальный максимум
extern float    yR;
extern float    dyL;			// производная значений двух точек, между которыми находится глобальный максимум
extern float    dyR;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern float    y_SW;            // Выходное значение фугкции FUNC_Calculating_Kotel_Point_X_SW
extern float    max_value_SDN;  // максимальное значение пеленгационного рельефа Mtheta



//////// Выходные данные после блока Пеленг ///////////

extern float    AMP_IRI_dB_SW;      //энергия (амплитуда) ИРИ с направления azimuth_Mtheta
extern float    coeff_reability_SW; //коэффициент достоверности
extern float    azimuth_Mtheta_SW;  //оценка азимута в градусах


/////////////////////////////////////////////////////

extern float    deltaP;         //  значение арктангенса, подлежащее сравнению с порогом для устранения неопределенности относительно выбора главного лепестка

/////////////////////////////////////////////////////
			//Выходной формуляр//

typedef struct
{
    float azimuth;
    float elevation;
    float central_Freq;
    float width;
    float left_Freq;
    float right_Freq;
    float energy_db;
    float coeff_reliability;
    float max_value_Mtheta;
    float reserved;
}Bearing_Inform_SW;

typedef struct
{
    uint32_t        num_signals;
    Bearing_Inform_SW signal[SIZE_FORM_SW];
}Bearing_SW;
extern Bearing_SW Inform_SW;

////////////////////////////////////////////////////						
