/*
*CP_PROJECT
*/

xdc.loadPackage ("ti.sysbios").profile="release";

/* use modules */
var Timestamp 	= xdc.useModule('xdc.runtime.Timestamp');
var Edma 		= xdc.loadPackage ("ti.sdo.edma3.drv.sample");
var drv 		= xdc.loadPackage ("ti.sdo.edma3.drv");
var rm 			= xdc.loadPackage ("ti.sdo.edma3.rm");
var Task        = xdc.useModule('ti.sysbios.knl.Task');
var Idle        = xdc.useModule('ti.sysbios.knl.Idle');
var BIOS        = xdc.useModule('ti.sysbios.BIOS');
var Startup     = xdc.useModule('xdc.runtime.Startup');
var SysStd      = xdc.useModule('xdc.runtime.SysStd');
var System      = xdc.useModule('xdc.runtime.System');
var SysMin      = xdc.useModule('xdc.runtime.SysMin');
//var SysMin 		= xdc.useModule('ti.sysbios.smp.SysMin');
var Log         = xdc.useModule("xdc.runtime.Log");
var Assert      = xdc.useModule('xdc.runtime.Assert');
var Main        = xdc.useModule('xdc.runtime.Main');
var Memory      = xdc.useModule('xdc.runtime.Memory');
var Program     = xdc.useModule('xdc.cfg.Program');
var Diags       = xdc.useModule('xdc.runtime.Diags');
var Semaphore   = xdc.useModule('ti.sysbios.knl.Semaphore');
var HeapMem     = xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBuf     = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var GIO         = xdc.useModule('ti.sysbios.io.GIO');
var Clock       = xdc.useModule('ti.sysbios.knl.Clock');
var Timestamp   = xdc.useModule('xdc.runtime.Timestamp');
var HalCore     = xdc.useModule('ti.sysbios.hal.Core');
var Load        = xdc.useModule('ti.sysbios.utils.Load');
var Hwi         = xdc.useModule('ti.sysbios.hal.Hwi');
var SyncSem     = xdc.useModule('ti.sysbios.syncs.SyncSem');
//var Cache       = xdc.useModule('ti.sysbios.family.arm.a15.smp.Cache');
var Cache       = xdc.useModule('ti.sysbios.family.arm.a15.Cache');
var HalCache    = xdc.useModule('ti.sysbios.hal.Cache');
var GateH       = xdc.useModule('xdc.runtime.knl.GateH');
var InitXbar    = xdc.useModule("ti.sysbios.family.shared.vayu.IntXbar");
var SemiHostSupport = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
var LoggerBuf 		= xdc.useModule('xdc.runtime.LoggerBuf');
//var LoggerBuf	 = xdc.useModule('ti.sysbios.smp.LoggerBuf');
var Text 		 = xdc.useModule('xdc.runtime.Text');
var IntXbar      = xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');
var Timer 	     = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var Swi 	     = xdc.useModule('ti.sysbios.knl.Swi');
var ti_sysbios_hal_Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Defaults     = xdc.useModule('xdc.runtime.Defaults');
var CurrentCore  = java.lang.System.getenv("CORE");
var Error		 = xdc.useModule('xdc.runtime.Error');
var Timer = xdc.useModule('ti.sysbios.hal.Timer'); // добавил для таймера
var timerParams = new Timer.Params();


xdc.useModule('xdc.runtime.Registry');

/* Enable cache */
Cache.enableCache = true;

/* load calculation related settings */
//Load.swiEnabled   = true;
//Load.hwiEnabled   = true;
//Load.taskEnabled  = true;
//Load.updateInIdle = true;
//Load.windowInMs   = 500;
//Load.postUpdate   = '&BspUtils_prfLoadUpdate';
/*
 *  ======== Miscellaneous Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.ALWAYS_OFF;
Defaults.common$.diags_EXIT      = Diags.ALWAYS_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.ALWAYS_OFF;
Defaults.common$.diags_INTERNAL  = Diags.ALWAYS_ON;     /* needed for asserts */
Defaults.common$.diags_ASSERT    = Diags.ALWAYS_ON;     /* development only   */
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER2     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER3     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER4     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER5     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER6     = Diags.ALWAYS_OFF;
Defaults.common$.diags_INFO      = Diags.ALWAYS_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.ALWAYS_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT  = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO  = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1 = Diags.RUNTIME_OFF;

/* create a logger instance */
//var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBufP = new LoggerBuf.Params();
loggerBufP.numEntries = 512;  /* 256 entries = 8 KB of memory */
loggerBufP.bufType = LoggerBuf.BufType_FIXED;

var appLogger = LoggerBuf.create(loggerBufP);
appLogger.instance.name = "AppLog_Core1";
Defaults.common$.logger = appLogger;

var Ndk          = xdc.loadPackage('ti.ndk.config');
var Global       = xdc.useModule('ti.ndk.config.Global');

//Global.autoOpenCloseFD=true;


/* Enable SMP BIOS */
BIOS.smpEnabled = false;
/*var Core = xdc.useModule('ti.sysbios.family.arm.a15.smp.Core');
Core.numCores = 2;*/

/* Bios lib instrumentation */
BIOS.libType = BIOS.LibType_Custom;

/* Fix for right clock of A15 */
BIOS.cpuFreq.hi = 0;//0
BIOS.cpuFreq.lo = 1000000000; /* 588 MHz */
Global.enableCodeGeneration = false;

/* Clock tick in microseconds */
Clock.tickPeriod    = 10;//1000

/* Stack size when NULL is passed as stack during TSK create    */
//Task.defaultStackSize   = 0x60000;//Task.defaultStackSize = 8192; в nimu
Task.defaultAffinity    = 0;

//Memory.defaultHeapSize  = 0x60000;//15000 grosh

/* ISR/SWI stack        */
Program.stack           = 0xA0000;//Program.stack = 0xA0000;
/* Heap used when creating semaphore's, TSK's or malloc() ... */
Program.heap            = 0xA0000;//15000 grosh
/*
// ISR/SWI stack        //
Program.stack           = 0x200000;//Program.stack = 0xA0000;
// Heap used when creating semaphore's, TSK's or malloc() ... //
Program.heap            = 0x200000;//15000 grosh*/

/* section mapping over-ride with respect to default    */
  Program.sectMap[".bss:extMemNonCache:vpdma"]              = "APP_UNCACHED_DATA_BLK3_MEM";

  Program.sectMap[".bss:frameBuffer"]                       = new Program.SectionSpec();
  Program.sectMap[".bss:frameBuffer"].loadSegment           = "APP_CACHED_DATA_BLK1_MEM";
  Program.sectMap[".bss:frameBuffer"].type                  = "NOLOAD";
  Program.sectMap[".bss:tilerBuffer"]                       = new Program.SectionSpec();
  Program.sectMap[".bss:tilerBuffer"].loadSegment           = "APP_CACHED_DATA_BLK2_MEM";
  Program.sectMap[".bss:tilerBuffer"].type                  = "NOLOAD";
  Program.sectMap[".plt"]                                   = "APP_CODE_MEM";
  Program.sectMap[".buffers"]                               = "OCMC_RAM3";

/* Board data and code sections need to go into OCMC when board is supported */
  Program.sectMap["BOARD_IO_DELAY_DATA"]                    = "OCMC_RAM1";
  Program.sectMap["BOARD_IO_DELAY_CODE"]                    = "OCMC_RAM1";

Main.common$.diags_ASSERT   = Diags.ALWAYS_ON;
Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;

/* To suppress the file name in BIOS compilation*/
var SourceDir = xdc.useModule('xdc.cfg.SourceDir');
SourceDir.verbose = 1;

/* Set the proxy for System module. This enables print statements at runtime in
 * the application */
System.SupportProxy                     = SysMin;
/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x400;
/***********************************************
 *              MMU Configuration              *
 ***********************************************/
var Mmu = xdc.useModule('ti.sysbios.family.arm.a15.Mmu');
Mmu.enableMMU = true;

// descriptor attribute structure

/*для работы pcie в smp перенес из main*/
/*var peripheralAttrs1 = new Mmu.DescriptorAttrs();
Mmu.initDescAttrsMeta(peripheralAttrs1);
peripheralAttrs1.type = Mmu.DescriptorType_TABLE;
peripheralAttrs1.accPerm = 1;                   // read/write at any PL
peripheralAttrs1.shareable = 0;                 // non-shareable
peripheralAttrs1.attrIndx = 0;                   // Use MAIR0 Register Byte 3 for
                                                 // determining the memory attributes
                                                 // for each MMU entry
Mmu.setFirstLevelDescMeta(0x00000000, 0x80301000, peripheralAttrs1);
Mmu.setFirstLevelDescMeta(0x40000000, 0x80302000, peripheralAttrs1);*/
///////////////////////////////////////////////////////////////////////////////

var peripheralAttrs = new Mmu.DescriptorAttrs();
Mmu.initDescAttrsMeta(peripheralAttrs);

peripheralAttrs.type = Mmu.DescriptorType_BLOCK;  // BLOCK descriptor
peripheralAttrs.noExecute = true;                 // not executable
peripheralAttrs.accPerm = 0;                      // read/write at PL1
peripheralAttrs.attrIndx = 1;                     // MAIR0 Byte1 describes
                                                  // memory attributes for
// Define the base address of the 2 MB page
// the peripheral resides in.
var peripheralBaseAddrs = [
  { base: 0x4A002000, size: 0x00004000 },   // CTRL_MODULE_CORE memory
  { base: 0x4A005000, size: 0x0000A000 },   // PRCM L4_CFG
  { base: 0x48970000, size: 0x00690000 },   // L4_PER3 Memory (DSS/VIP/etc)
  { base: 0x48440200, size: 0x00001000 },   // PWMSS2_EPWM
  { base: 0x48060000, size: 0x0000D000 },   // I2C register memory
  { base: 0x58000000, size: 0x0000D000 },   // DISPC register memory
  { base: 0x4ae00000, size: 0x00100000 },  // PRM
  { base: 0x51000000, size: 0x00800000 },  // pcie_ss1 regs
  { base: 0x51800000, size: 0x01000000 },  // pcie_ss2 regs
  { base: 0x20000000, size: 0x10000000 },  // pcie_ss1 data
  { base: 0x30000000, size: 0x10000000 },  // pcie_ss2 data
  /* Following registers for IODELAY/PINMUX */
  { base: 0x4844a000, size: 0x00001000 },
  { base: 0x48447000, size: 0x00001000 },
  { base: 0x4a002000, size: 0x00001000 },
  { base: 0x43300000, size: 0x00300000 }
];

// Configure the corresponding MMU page descriptor accordingly
for (var i =0; i < peripheralBaseAddrs.length; i++)
{
  for (var j = 0; j < peripheralBaseAddrs[i].size; j += 0x200000)
  {
      var addr = peripheralBaseAddrs[i].base + j;
      Mmu.setSecondLevelDescMeta(addr, addr, peripheralAttrs);
    }
}


/******************************************************************************
 *
 * SYS/BIOS assigns the following defaults to MAIR0 ATTR0, ATTR1 and ATTR2:
 *
 * ATTR0 -> 0x44 (mark memory region as non-cacheable normal memory)
 * ATTR1 -> 0x00 (mark memory region as device memory, i.e. strongly
 * ordered and non-cacheable)
 * ATTR2 -> 0xFF (mark memory region as normal memory, RW cacheable and
 * RW allocate)
 ******************************************************************************
 */

// descriptor attribute structure
var attrs0 = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(attrs0);
attrs0.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs0.shareable = 2;                      // sharerable
attrs0.attrIndx = 2;                       // Cached, normal memory

// Set the descriptor for each entry in the address range
// Set OCMC memories as shareable and cacheable in case Board package is used
for (var i=0x40000000; i < 0x40600000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs0);
}

attrs0.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs0.noExecute = true;                   // not executable
attrs0.accPerm = 0;                        // read/write at PL1
attrs0.shareable = 2;                      // shareable
attrs0.attrIndx = 1;                       // strongly ordered and non-cacheable

// Set the descriptor for each entry in the address range
// Remaining OCMC region configured as non-cacheable, device memory.
for (var i=0x40600000; i < 0x60000000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs0);
}

// descriptor attribute structure
var attrs1 = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(attrs1);
attrs1.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs1.shareable = 2;                      // sharerable
attrs1.attrIndx = 2;                       // Cached, normal memory

// Set the descriptor for each entry in the address range
for (var i=0x80000000; i < 0xA0000000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs1);
}

// descriptor attribute structure
var attrs2 = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(attrs2);
attrs2.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs2.shareable = 2;                      // sharerable
attrs2.attrIndx = 0;                       // Non-cache, normal memory

// Set the descriptor for each entry in the address range
for (var i=0xa0000000; i < 0xC0000000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs2);
}

Task.addHookSet({
	registerFxn: '&TaskRegisterId',
	switchFxn: '&mySwitch',
});
/* ================ Driver configuration ================ */

/* Building the executables for the platform */
var RTSCPlatformName = Program.platformName;
var boardName;
var socType;
if (RTSCPlatformName == "ti.platforms.idkAM572X")
{
  xdc.print("# !!! Current build BOARD is idkAM572x !!!" );
  boardName = "idkAM572x";
  socType   = "am572x";
}
else
{
  xdc.print("# !!! Current build BOARD is evmAM572x !!!" );
  boardName = "evmAM572x";
  socType   = "am572x";
}

var osType = "tirtos"
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = socType;

var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = socType;

var Mmcsd = xdc.loadPackage('ti.drv.mmcsd');
Mmcsd.Settings.socType = socType;
Mmcsd.Settings.useDma = "false";

var Utils = xdc.loadPackage('ti.utils.profiling');

var Pcie = xdc.loadPackage('ti.drv.pcie');
Pcie.Settings.enableProfiling = true;
/* Enable only if soc-specific library should be used */ 
Pcie.Settings.socType = socType;

var Fatfs = xdc.loadPackage('ti.fs.fatfs');

var Spi              = xdc.loadPackage('ti.drv.spi');
Spi.Settings.socType = socType;


///////////////////////////////
var Usb = xdc.loadPackage('ti.drv.usb');     
var usbSettings = xdc.useModule('ti.drv.usb.Settings');
usbSettings.socType = socType; 
usbSettings.libProfile = "release";


///////////////////////////////

var Pm              = xdc.loadPackage('ti.drv.pm');
Pm.Settings.socType = socType;
Pm.Settings.libProfile = "release";

var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName  = boardName;
Board.Settings.libProfile = "release";

var drv        		= xdc.loadPackage ("ti.sdo.edma3.drv");

var rm        		= xdc.loadPackage ("ti.sdo.edma3.rm");

var Edma        	= xdc.loadPackage ("ti.sdo.edma3.drv.sample");


var Emac = xdc.loadPackage('ti.drv.emac');
Emac.Settings.socType = socType;

var Gpio = xdc.loadPackage('ti.drv.gpio');

var Uart = xdc.loadPackage('ti.drv.uart');
//Uart.Settings.socType = socType;
Uart.Settings.enableProfiling = true;

var I2C = xdc.loadPackage('ti.drv.i2c');

var Nimu 		= xdc.loadPackage('ti.transport.ndk.nimu');
Nimu.Settings.socType  = socType;

//var Cache1    = xdc.useModule('ti.sysbios.family.arm.a15.smp.Cache');
var Cache1  = xdc.useModule('ti.sysbios.family.arm.a15.Cache');
Cache1.enableCache = true;

var vps = xdc.loadPackage ('ti.drv.vps');
vps.Settings.socType    = socType;
vps.Settings.libProfile = "release";

////////////////////////////
/* Enable the MMU (Required for L1 data caching) */
Mmu.enableMMU = true;

var attrs = new Mmu.DescriptorAttrs();
Mmu.initDescAttrsMeta(attrs);
attrs.type = Mmu.DescriptorType_BLOCK;
attrs.noExecute = true;
attrs.accPerm = 0;       // R/W at PL1
attrs.attrIndx = 7;      // Use MAIR0 Byte7
Mmu.setMAIRMeta(7, 0x04);

Mmu.setSecondLevelDescMeta(0x43200000, 0x43200000, attrs);

/* Set IO Delay configuration areas as non-cache */
attrs.attrIndx = 1;
Mmu.setSecondLevelDescMeta(0x4844a000, 0x4844a000, attrs); /* IODELAYCONFIG */
Mmu.setSecondLevelDescMeta(0x4ae07d00, 0x4ae07d00, attrs); /* ? */

Mmu.setSecondLevelDescMeta(0x48880000, 0x48880000, attrs); /* USB1 */
Mmu.setSecondLevelDescMeta(0x488C0000, 0x488C0000, attrs); /* USB2 */


////////////////////////////



/* ЗАМЕНА IPC */
                                                 
var common_mem = new Mmu.DescriptorAttrs();
Mmu.initDescAttrsMeta(common_mem);
common_mem.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
common_mem.shareable = 2;
common_mem.attrIndx = 0;                       // Non-cache, normal memory
Mmu.setSecondLevelDescMeta(0xA3000000, 0xA3000080, common_mem);

/*
*	IPC
*/
xdc.useModule('ti.sdo.ipc.Ipc');
xdc.useModule('ti.sdo.ipc.MessageQ');
xdc.useModule('ti.sdo.ipc.SharedRegion');
xdc.useModule('ti.sdo.utils.MultiProc');

xdc.global.SR0_cacheEnable = false;
xdc.global.procName = "HOST";
var ipc_cfg = xdc.loadCapsule("../IPC/shared/ipc.cfg.xs");

var Build = xdc.useModule('ti.sdo.ipc.Build');
/*
* 
*/

Program.sectMap[".bss:extMemNonCache:vpdma"]              = "APP_UNCACHED_DATA_BLK3_MEM";
Program.sectMap[".bss:pcie"]					          = "APP_PCIE_MEM";
Program.sectMap[".bss:frameBuffer"]                       = new Program.SectionSpec();
Program.sectMap[".bss:frameBuffer"].loadSegment           = "APP_CACHED_DATA_BLK1_MEM";
Program.sectMap[".bss:frameBuffer"].type                  = "NOLOAD";
Program.sectMap[".plt"]                                   = "APP_CODE_MEM";
Program.sectMap[".bss:supression"]                        = "SUPRESSION";
Program.sectMap[".bss:variables"]                         = "VARIABLES";
Program.sectMap[".bss:rxvipbuf"]  						  = "VIP_BUF";
Program.sectMap["BOARD_IO_DELAY_DATA"]                    = "OCMC_RAM1";
Program.sectMap["BOARD_IO_DELAY_CODE"]                    = "OCMC_RAM1";
/////
Program.sectMap[".bss:extMemNonCache:usbXhci"]              = "APP_UNCACHED_DATA_BLK3_MEM";
Program.sectMap[".bss:extMemCache:ramdisk"]                 = new Program.SectionSpec();
Program.sectMap[".bss:extMemCache:ramdisk"].loadSegment     = "APP_CACHED_DATA_BLK2_MEM";
Program.sectMap[".bss:extMemCache:ramdisk"].type            = "NOLOAD";
///
Global.pktSizeFrameBuf = 5000;

